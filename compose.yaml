version: '3.8'
services:
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch1
    ports:
      - "9300:9300"
    environment:
      - NODE_NAME=elasticsearch1
      - discovery.seed_hosts=elasticsearch2:9300,elasticsearch3:9300
      - cluster.name=bt-cluster
      - node.roles=master,data # 마스터와 데이터 역할 모두 수행
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=1016
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3 # 모든 노드 포함
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch-data1:/usr/share/elasticsearch/data
      - ./data/init:/usr/share/elasticsearch/init
      - ./data/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - elk_network
    entrypoint: ["/bin/bash", "-c", "/usr/share/elasticsearch/init/create_indices.sh && /usr/share/elasticsearch/bin/elasticsearch"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - IPC_LOCK
    depends_on:
      elasticsearch2:
        condition: service_healthy
      elasticsearch3:
        condition: service_healthy

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch2
    ports:
      - "9301:9300"
    environment:
      - NODE_NAME=elasticsearch2
      - discovery.seed_hosts=elasticsearch1:9300,elasticsearch3:9300
      - cluster.name=bt-cluster
      - node.roles=master,data
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=1016
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch-data2:/usr/share/elasticsearch/data
      - ./data/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - IPC_LOCK
    networks:
      - elk_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      retries: 5

  elasticsearch3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch3
    ports:
      - "9302:9300"
    environment:
      - NODE_NAME=elasticsearch3
      - discovery.seed_hosts=elasticsearch1:9300,elasticsearch2:9300
      - cluster.name=bt-cluster
      - node.roles=master,data
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=1016
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch-data3:/usr/share/elasticsearch/data
      - ./data/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - IPC_LOCK
    networks:
      - elk_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=["http://nginx:9200"]  # Nginx로 연결
    networks:
      - elk_network
    depends_on:
      - nginx

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  postgres:
    image: postgres:latest
    container_name: postgresSQL
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: btrdb
      POSTGRES_USER: btuser
      POSTGRES_PASSWORD: 1016

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "9200:9200"  # 호스트의 9200 포트로 통합 접근
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - elk_network
    depends_on:
      - elasticsearch1
      - elasticsearch2
      - elasticsearch3

  jenkins:
    image: jenkins/jenkins:latest
    container_name: jenkins
    ports:
      - "8080:8080"
      - "8443:8443"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"
    networks:
      - jenkins_network

  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: fluent-bit
    ports:
      - "9880:9880"
    volumes:
      - ./data/config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./data/config/parsers.conf:/fluent-bit/etc/parsers.conf
    command: /fluent-bit/bin/fluent-bit -c /fluent-bit/etc/fluent-bit.conf
    networks:
      - elk_network
    depends_on:
      - elasticsearch1

volumes:
  jenkins_home:
  elasticsearch-data1:
  elasticsearch-data2:
  elasticsearch-data3:
networks:
  jenkins_network:
    driver: bridge
  elk_network:
    driver: bridge